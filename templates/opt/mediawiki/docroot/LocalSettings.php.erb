<?php
# This file is automatically generated by Puppet. DO NOT EDIT.



# LocalSettings.php is loaded by Mediawiki. Since Mediawiki is *infinitely* configurable,
# there are only so many things that we can hope to configure in here. Therefore:
#
# This file is templated by Puppet and is overwritten by Puppet runs.
#
# Manual changes go into ManualSettings.php, which is created by Puppet but
# will not be overwritten by subsequent runs if it already exists.
#
# Changes in ManualSettings.php should be considered expendable, and will not
# be supported by sysadmins. They should be merged into Puppet if possible.



# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}

## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename = "<%= @wiki_name %>";
$wgMetaNamespace = "<%= @namespace %>";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs
## (like /w/index.php/Page_title to /wiki/Page_title) please see:
## https://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath = "<%= @wiki_path %>";


$actions = array( 'edit', 'watch', 'unwatch', 'delete','revert', 'rollback',
  'protect', 'unprotect', 'markpatrolled', 'render', 'submit', 'history', 'purge', 'info' );
 
foreach ( $actions as $action ) {
  $wgActionPaths[$action] = "<%= @wiki_path %>/$1/$action";
}
$wgActionPaths['view'] = "<%= @wiki_path %>/$1";
$wgArticlePath = $wgActionPaths['view'];

## The protocol and server name to use in fully-qualified URLs
$wgServer = "https://<%= @server_name %>";

## The URL path to static resources (images, scripts, etc.)
$wgResourceBasePath = '<%= @resource_path %>';

$wgFavicon = '<%= @favicon_path %>';
$wgLogos = [ '1x' => "<%= @logo_path %>" ];

## UPO means: this is also a user preference option

$wgEnableEmail = <%= @email_enabled %>;
$wgEnableUserEmail = <%= @email_user %>; # UPO

$wgEmergencyContact = "<%= @admin_email %>";
$wgPasswordSender = "<%= @noreply_email %>";
$wgNoReplyAddress = "<%= @noreply_email %>";

$wgEnotifUserTalk = true; # UPO
$wgEnotifWatchlist = true; # UPO
$wgEmailAuthentication = true;

## Database settings
$wgDBtype = "<%= @db_type %>";
$wgDBserver = "<%= @db_host %>";
$wgDBname = "<%= @database_name %>";
$wgDBuser = "<%= @db_user %>";
$wgDBpassword = "<%= @db_pass %>";

# Postgres specific settings
$wgDBport = "<%= @db_port %>";
<% if @db_type != 'mysql' -%>
$wgDBmwschema = "mediawiki";
<% end -%>

## Shared memory settings
$wgMainCacheType = <%= @cache_type %>;
$wgParserCacheType = <%= @parser_cache_type %>;
$wgMemCachedServers = [<%= @memcached_servers_list %>];
$wgParserCacheExpireTime = <%= @parser_cache_expiry %>;

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads = <%= @image_uploads %>;
$wgUseImageMagick = <%= @imagemagick %>;
$wgImageMagickConvertCommand = "/usr/bin/convert";

$wgUploadDirectory = "<%= @upload_dir_real %>";
$wgUploadPath = "<%= @upload_dir %>";
$wgFileExtensions = [<%= @file_exts %>];

# InstantCommons allows wiki to use images from https://commons.wikimedia.org
$wgUseInstantCommons = false;

# Periodically send a pingback to https://www.mediawiki.org/ with basic data
# about this MediaWiki instance. The Wikimedia Foundation shares this data
# with MediaWiki developers to help guide future development efforts.
$wgPingback = false;

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale
$wgShellLocale = "<%= @locale %>";

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publicly accessible from the web.
$wgCacheDirectory = "<%= @cache_dir %>";

# Site language code, should be one of the list in ./languages/data/Names.php
$wgLanguageCode = "<%= @lang %>";

$wgSecretKey = "<%= @secret_key_real %>";

# Changing this will log out all existing sessions.
$wgAuthenticationTokenVersion = "1";

# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
$wgUpgradeKey = "<%= @upgrade_key_real %>";

$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";

# Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = "/usr/bin/diff3";

# Do not require RESTBase for VisualEditor.
$wgVisualEditorAllowLossySwitching = false;

<% @group_perms.each do |group, content| -%>
<% content.each do |perm, val| -%>
$wgGroupPermissions['<%= group %>']['<%= perm %>'] = <%= val %>;
<% end -%>
<% end -%>

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'vector', 'monobook':
$wgDefaultSkin = "<%= @default_skin %>";

# Enabled skins.
<% @bundled_skins.each do |skin| -%>
wfLoadSkin( '<%= skin %>' );
<% end -%>
<% @skins.each do |skin, content| -%>
wfLoadSkin( '<%= skin %>' );
<% end -%>

# Enabled extensions
<% @bundled_extensions.each do |extension| -%>
wfLoadExtension( '<%= extension %>' );
<% end -%>
<% @extensions_list.each do |extension, content| -%>
wfLoadExtension( '<%= extension %>' );
<% content.each do |name, val| -%>
<% if name == 'config' -%>
<% val.each do |setting, value| -%>
$<%= setting %> = <%= value.is_a?(String) ? "'" + value + "'": value %>;
<% end -%>
<% end -%>
<% end -%>
<% end -%>

<% if @ldap_enabled -%>
$LDAPProviderDomainConfigs = '<%= @config_dir %>/ldapprovider.json';
$wgPluggableAuth_ButtonLabelMessage = '<%= @login_message %>';
$LDAPAuthentication2UsernameNormalizer = 'strtolower';
<% end -%>

$wgSMTP = [
<% @smtp_settings.each do |setting, value| -%>
  '<%= setting %>' => <%= value.is_a?(String) ? "'" + value + "'": value %>,
<% end -%>
];

<% if @swift_enabled -%>
# Swift Object Storage
$wgFileBackends[] = [
  'name'            => 'localSwift-<%= @swift_namespace %>',
  'class'           => 'SwiftFileBackend',
  'wikiId'          => '<%= @swift_namespace %>',
  'lockManager'     => 'nullLockManager',
  'swiftAuthUrl'    => '<%= @swift_auth_url %>',
<% if @swift_storage_url != '' -%>
  'swiftStorageUrl' => '<%= @swift_storage_url %>',
<% end -%>
  'swiftUser'       => '<%= @swift_user %>',
  'swiftKey'        => '<%= @swift_key %>',
<% if @swift_temp_url_key != '' -%>
  'swiftTempUrlKey' => '<%= @swift_temp_url_key %>',
<% end -%>
  'parallelize'     => 'implicit',
  'cacheAuthInfo'   => true,
];

$wgLocalFileRepo  =  array(
  'class'             => 'LocalRepo',
  'name'              => 'local',
  'backend'           => 'localSwift-<%= @swift_namespace %>',
  'scriptDirUrl'      => $wgScriptPath,
  'zones'             => [
    'public' => ['container' => 'public', 'url' => '<%= @swift_storage_url %>/<%= @swift_namespace %>-public'],
    'thumb' => ['container' => 'thumb', 'url' => '<%= @swift_storage_url %>/<%= @swift_namespace %>-thumb'],
    'temp' => ['container' => 'temp', 'url' => '<%= @swift_storage_url %>/<%= @swift_namespace %>-temp'],
    'archive' => ['container' => 'archive', 'url' => '<%= @swift_storage_url %>/<%= @swift_namespace %>-archive'],
    'deleted' => ['container' => 'deleted', 'url' => '<%= @swift_storage_url %>/<%= @swift_namespace %>-deleted'],
  ],
  'hashLevels'        => 2,
  'deletedHashLevels' => 0,
);
<% end -%>

$wgVerifyMimeType = <%= @verify_mimetype %>;

# Load other settings

require_once('ManualSettings.php');
